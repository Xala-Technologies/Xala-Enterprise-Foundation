name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 2.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run (no actual publishing)'
        required: false
        type: boolean
        default: false

env:
  NODE_ENV: production
  REGISTRY_URL: https://npm.pkg.github.com

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should-publish: ${{ steps.validate.outputs.should-publish }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from input or tag
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"

          # Validate semantic versioning format
          # Pattern: MAJOR.MINOR.PATCH with optional prerelease and build metadata
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?(\+[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (e.g., 2.0.0, 2.0.0-beta.1, 1.0.0+build.1)"
            exit 1
          fi

          echo "✅ Version format is valid: $VERSION"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate package.json version
        id: validate
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.get-version.outputs.version }}"

          echo "Package.json version: $PACKAGE_VERSION"
          echo "Release version: $RELEASE_VERSION"

          if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
            echo "❌ Version mismatch between package.json ($PACKAGE_VERSION) and release ($RELEASE_VERSION)"
            echo "Please update package.json version before publishing"
            exit 1
          fi

          echo "✅ Version validation passed"
          echo "should-publish=true" >> $GITHUB_OUTPUT

  security-check:
    name: Pre-publish Security Check
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "Running pre-publish security audit..."
          pnpm audit --audit-level moderate || {
            echo "❌ Security vulnerabilities found. Cannot publish."
            exit 1
          }
          echo "✅ Pre-publish security audit passed"

      - name: Check for sensitive files
        run: |
          echo "Checking for sensitive files in package..."

          # Files that should not be published
          SENSITIVE_PATTERNS=".env .env.* *.key *.pem *.p12 secrets.* credentials.*"

          for pattern in $SENSITIVE_PATTERNS; do
            if find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*" | grep -q .; then
              echo "❌ Sensitive files found matching pattern: $pattern"
              find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*"
              exit 1
            fi
          done

          echo "✅ No sensitive files found"

  build-and-test:
    name: Build and Test for Publishing
    runs-on: ubuntu-latest
    needs: [validate-release, security-check]
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite
        run: |
          echo "Running comprehensive test suite for Node.js ${{ matrix.node-version }}..."
          pnpm run validate

      - name: Build package
        run: pnpm run build

      - name: Test Norwegian compliance features
        run: |
          echo "Testing Norwegian compliance features..."
          node -e "
            (async () => {
              try {
                const foundation = await import('./dist/index.esm.js');

                // Test core functionality
                if (!foundation.EventBus || !foundation.NORWEGIAN_COMPLIANCE) {
                  throw new Error('Core foundation services not available');
                }

                // Test Norwegian compliance
                if (!foundation.NORWEGIAN_COMPLIANCE || !foundation.NORWEGIAN_COMPLIANCE.NSM_CLASSIFICATIONS) {
                  throw new Error('Norwegian compliance constants not available');
                }

                console.log('✅ Norwegian compliance features validated');
              } catch (error) {
                console.error('❌ Norwegian compliance validation failed:', error.message);
                process.exit(1);
              }
            })();
          "

      - name: Package integrity test
        run: |
          echo "Testing package integrity..."

          # Test that package can be packed
          pnpm pack --dry-run

          # Check dist files
          ls -la dist/

          # Verify main and types files exist
          test -f dist/index.js || (echo "Missing main file" && exit 1)
          test -f dist/index.d.ts || (echo "Missing types file" && exit 1)

          echo "✅ Package integrity verified"

  publish:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [validate-release, security-check, build-and-test]
    if: needs.validate-release.outputs.should-publish == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm run build

      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🧪 Performing dry run - no actual publishing"
          pnpm pack --dry-run
          echo "✅ Dry run completed successfully"

      - name: Publish to GitHub Packages
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "📦 Publishing @xala-technologies/foundation@${{ needs.validate-release.outputs.version }} to GitHub Packages..."

          # Configure npm for GitHub Packages
          echo "@xala-technologies:registry=${{ env.REGISTRY_URL }}" >> .npmrc
          echo "${{ env.REGISTRY_URL }}/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

          # Publish package
          pnpm publish --no-git-checks --access public

          echo "✅ Package published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release assets
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "📋 Creating release assets..."

          # Create package archive
          pnpm pack

          # Create checksums
          PACKAGE_FILE=$(ls *.tgz)
          sha256sum "$PACKAGE_FILE" > "$PACKAGE_FILE.sha256"

          echo "Created release assets:"
          ls -la *.tgz *.sha256

      - name: Upload release assets
        if: github.event_name == 'release' && github.event.inputs.dry_run != 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.create-assets.outputs.package_file }}
          asset_name: ${{ steps.create-assets.outputs.package_file }}
          asset_content_type: application/gzip

  notify-success:
    name: Notify Publication Success
    runs-on: ubuntu-latest
    needs: [validate-release, publish]
    if: success() && github.event.inputs.dry_run != 'true'

    steps:
      - name: Success notification
        run: |
          echo "🎉 Package @xala-technologies/foundation@${{ needs.validate-release.outputs.version }} published successfully!"
          echo ""
          echo "📦 Installation instructions:"
          echo "  pnpm add @xala-technologies/foundation@${{ needs.validate-release.outputs.version }}"
          echo ""
          echo "📚 Documentation:"
          echo "  https://github.com/xala-technologies/foundation/tree/v${{ needs.validate-release.outputs.version }}/docs"
          echo ""
          echo "🔍 Package details:"
          echo "  https://github.com/xala-technologies/foundation/packages"

  notify-failure:
    name: Notify Publication Failure
    runs-on: ubuntu-latest
    needs: [validate-release, security-check, build-and-test, publish]
    if: failure()

    steps:
      - name: Failure notification
        run: |
          echo "❌ Package publication failed!"
          echo ""
          echo "📋 Check the following:"
          echo "- Version validation: ${{ needs.validate-release.result }}"
          echo "- Security check: ${{ needs.security-check.result }}"
          echo "- Build and test: ${{ needs.build-and-test.result }}"
          echo "- Publish: ${{ needs.publish.result }}"
          echo ""
          echo "🔧 Please review the workflow logs and fix any issues before retrying."
